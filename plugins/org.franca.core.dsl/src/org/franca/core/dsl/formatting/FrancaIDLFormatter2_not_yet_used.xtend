/*
 * generated by Xtext 2.11.0
 */
package org.franca.core.dsl.formatting

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.franca.core.dsl.services.FrancaIDLGrammarAccess
import org.franca.core.franca.FConstantDef
import org.franca.core.franca.FInterface
import org.franca.core.franca.FModel
import org.franca.core.franca.FType
import org.franca.core.franca.FTypeCollection
import org.franca.core.franca.Import

/**
 * This is a starting point for a Franca IDL formatter, using the new formatter API.
 * Currently, it is not used (and it is not complete).
 * 
 * Some day this class will replace the old FrancaIDLFormatter.
 */
class FrancaIDLFormatter2_not_yet_used extends AbstractFormatter2 {
	
	@Inject extension FrancaIDLGrammarAccess

	def dispatch void format(FModel fModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Import _import : fModel.getImports()) {
			_import.format;
		}
		for (FTypeCollection fTypeCollection : fModel.getTypeCollections()) {
			fTypeCollection.format;
		}
		for (FInterface fInterface : fModel.getInterfaces()) {
			fInterface.format;
		}
	}

	def dispatch void format(FTypeCollection fTypeCollection, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		fTypeCollection.getComment.format;
		fTypeCollection.getVersion.format;
		for (FConstantDef fConstantDef : fTypeCollection.getConstants()) {
			fConstantDef.format;
		}
		for (FType fType : fTypeCollection.getTypes()) {
			fType.format;
		}
	}
	
	// TODO: implement for FInterface, FAttribute, FMethod, FBroadcast, FArgument, FTypeRef, FArrayType, FTypeDef, FStructType, FUnionType, FEnumerationType, FEnumerator, FMapType, FField, FDeclaration, FConstantDef, FCompoundInitializer, FFieldInitializer, FBracketInitializer, FElementInitializer, FContract, FStateGraph, FState, FTransition, FTrigger, FGuard, FIfStatement, FAssignment, FBlock, FBinaryOperation, FUnaryOperation, FAnnotationBlock, FQualifiedElementRef
}
